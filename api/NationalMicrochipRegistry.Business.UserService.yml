### YamlMime:ManagedReference
items:
- uid: NationalMicrochipRegistry.Business.UserService
  commentId: T:NationalMicrochipRegistry.Business.UserService
  id: UserService
  parent: NationalMicrochipRegistry.Business
  children:
  - NationalMicrochipRegistry.Business.UserService.#ctor(NationalMicrochipRegistry.Data.IUserRepository)
  - NationalMicrochipRegistry.Business.UserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
  - NationalMicrochipRegistry.Business.UserService.GetAllUsersAsync
  - NationalMicrochipRegistry.Business.UserService.LoginAsync(System.String,System.String)
  - NationalMicrochipRegistry.Business.UserService.RemoveUserAsync(System.Int32)
  langs:
  - csharp
  - vb
  name: UserService
  nameWithType: UserService
  fullName: NationalMicrochipRegistry.Business.UserService
  type: Class
  source:
    remote:
      path: Business/UserService.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: UserService
    path: Business/UserService.cs
    startLine: 7
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Business
  syntax:
    content: 'public class UserService : IUserService'
    content.vb: >-
      Public Class UserService
          Implements IUserService
  inheritance:
  - System.Object
  implements:
  - NationalMicrochipRegistry.Business.IUserService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NationalMicrochipRegistry.Business.UserService.#ctor(NationalMicrochipRegistry.Data.IUserRepository)
  commentId: M:NationalMicrochipRegistry.Business.UserService.#ctor(NationalMicrochipRegistry.Data.IUserRepository)
  id: '#ctor(NationalMicrochipRegistry.Data.IUserRepository)'
  parent: NationalMicrochipRegistry.Business.UserService
  langs:
  - csharp
  - vb
  name: UserService(IUserRepository)
  nameWithType: UserService.UserService(IUserRepository)
  fullName: NationalMicrochipRegistry.Business.UserService.UserService(NationalMicrochipRegistry.Data.IUserRepository)
  type: Constructor
  source:
    remote:
      path: Business/UserService.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: .ctor
    path: Business/UserService.cs
    startLine: 11
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Business
  syntax:
    content: public UserService(IUserRepository userRepository)
    parameters:
    - id: userRepository
      type: NationalMicrochipRegistry.Data.IUserRepository
    content.vb: Public Sub New(userRepository As IUserRepository)
  overload: NationalMicrochipRegistry.Business.UserService.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NationalMicrochipRegistry.Business.UserService.LoginAsync(System.String,System.String)
  commentId: M:NationalMicrochipRegistry.Business.UserService.LoginAsync(System.String,System.String)
  id: LoginAsync(System.String,System.String)
  parent: NationalMicrochipRegistry.Business.UserService
  langs:
  - csharp
  - vb
  name: LoginAsync(String, String)
  nameWithType: UserService.LoginAsync(String, String)
  fullName: NationalMicrochipRegistry.Business.UserService.LoginAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: Business/UserService.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: LoginAsync
    path: Business/UserService.cs
    startLine: 16
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Business
  syntax:
    content: public async Task<bool> LoginAsync(string username, string password)
    parameters:
    - id: username
      type: System.String
    - id: password
      type: System.String
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function LoginAsync(username As String, password As String) As Task(Of Boolean)
  overload: NationalMicrochipRegistry.Business.UserService.LoginAsync*
  implements:
  - NationalMicrochipRegistry.Business.IUserService.LoginAsync(System.String,System.String)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: NationalMicrochipRegistry.Business.UserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
  commentId: M:NationalMicrochipRegistry.Business.UserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
  id: AddUserAsync(NationalMicrochipRegistry.Models.User)
  parent: NationalMicrochipRegistry.Business.UserService
  langs:
  - csharp
  - vb
  name: AddUserAsync(User)
  nameWithType: UserService.AddUserAsync(User)
  fullName: NationalMicrochipRegistry.Business.UserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
  type: Method
  source:
    remote:
      path: Business/UserService.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: AddUserAsync
    path: Business/UserService.cs
    startLine: 23
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Business
  syntax:
    content: public async Task AddUserAsync(User user)
    parameters:
    - id: user
      type: NationalMicrochipRegistry.Models.User
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function AddUserAsync(user As User) As Task
  overload: NationalMicrochipRegistry.Business.UserService.AddUserAsync*
  implements:
  - NationalMicrochipRegistry.Business.IUserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: NationalMicrochipRegistry.Business.UserService.RemoveUserAsync(System.Int32)
  commentId: M:NationalMicrochipRegistry.Business.UserService.RemoveUserAsync(System.Int32)
  id: RemoveUserAsync(System.Int32)
  parent: NationalMicrochipRegistry.Business.UserService
  langs:
  - csharp
  - vb
  name: RemoveUserAsync(Int32)
  nameWithType: UserService.RemoveUserAsync(Int32)
  fullName: NationalMicrochipRegistry.Business.UserService.RemoveUserAsync(System.Int32)
  type: Method
  source:
    remote:
      path: Business/UserService.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: RemoveUserAsync
    path: Business/UserService.cs
    startLine: 28
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Business
  syntax:
    content: public async Task RemoveUserAsync(int userId)
    parameters:
    - id: userId
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveUserAsync(userId As Integer) As Task
  overload: NationalMicrochipRegistry.Business.UserService.RemoveUserAsync*
  implements:
  - NationalMicrochipRegistry.Business.IUserService.RemoveUserAsync(System.Int32)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: NationalMicrochipRegistry.Business.UserService.GetAllUsersAsync
  commentId: M:NationalMicrochipRegistry.Business.UserService.GetAllUsersAsync
  id: GetAllUsersAsync
  parent: NationalMicrochipRegistry.Business.UserService
  langs:
  - csharp
  - vb
  name: GetAllUsersAsync()
  nameWithType: UserService.GetAllUsersAsync()
  fullName: NationalMicrochipRegistry.Business.UserService.GetAllUsersAsync()
  type: Method
  source:
    remote:
      path: Business/UserService.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: GetAllUsersAsync
    path: Business/UserService.cs
    startLine: 33
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Business
  syntax:
    content: public async Task<IEnumerable<User>> GetAllUsersAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{NationalMicrochipRegistry.Models.User}}
    content.vb: Public Function GetAllUsersAsync As Task(Of IEnumerable(Of User))
  overload: NationalMicrochipRegistry.Business.UserService.GetAllUsersAsync*
  implements:
  - NationalMicrochipRegistry.Business.IUserService.GetAllUsersAsync
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
references:
- uid: NationalMicrochipRegistry.Business
  commentId: N:NationalMicrochipRegistry.Business
  name: NationalMicrochipRegistry.Business
  nameWithType: NationalMicrochipRegistry.Business
  fullName: NationalMicrochipRegistry.Business
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NationalMicrochipRegistry.Business.IUserService
  commentId: T:NationalMicrochipRegistry.Business.IUserService
  parent: NationalMicrochipRegistry.Business
  name: IUserService
  nameWithType: IUserService
  fullName: NationalMicrochipRegistry.Business.IUserService
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NationalMicrochipRegistry.Business.UserService.#ctor*
  commentId: Overload:NationalMicrochipRegistry.Business.UserService.#ctor
  name: UserService
  nameWithType: UserService.UserService
  fullName: NationalMicrochipRegistry.Business.UserService.UserService
- uid: NationalMicrochipRegistry.Data.IUserRepository
  commentId: T:NationalMicrochipRegistry.Data.IUserRepository
  parent: NationalMicrochipRegistry.Data
  name: IUserRepository
  nameWithType: IUserRepository
  fullName: NationalMicrochipRegistry.Data.IUserRepository
- uid: NationalMicrochipRegistry.Data
  commentId: N:NationalMicrochipRegistry.Data
  name: NationalMicrochipRegistry.Data
  nameWithType: NationalMicrochipRegistry.Data
  fullName: NationalMicrochipRegistry.Data
- uid: NationalMicrochipRegistry.Business.UserService.LoginAsync*
  commentId: Overload:NationalMicrochipRegistry.Business.UserService.LoginAsync
  name: LoginAsync
  nameWithType: UserService.LoginAsync
  fullName: NationalMicrochipRegistry.Business.UserService.LoginAsync
- uid: NationalMicrochipRegistry.Business.IUserService.LoginAsync(System.String,System.String)
  commentId: M:NationalMicrochipRegistry.Business.IUserService.LoginAsync(System.String,System.String)
  parent: NationalMicrochipRegistry.Business.IUserService
  isExternal: true
  name: LoginAsync(String, String)
  nameWithType: IUserService.LoginAsync(String, String)
  fullName: NationalMicrochipRegistry.Business.IUserService.LoginAsync(System.String, System.String)
  spec.csharp:
  - uid: NationalMicrochipRegistry.Business.IUserService.LoginAsync(System.String,System.String)
    name: LoginAsync
    nameWithType: IUserService.LoginAsync
    fullName: NationalMicrochipRegistry.Business.IUserService.LoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NationalMicrochipRegistry.Business.IUserService.LoginAsync(System.String,System.String)
    name: LoginAsync
    nameWithType: IUserService.LoginAsync
    fullName: NationalMicrochipRegistry.Business.IUserService.LoginAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: NationalMicrochipRegistry.Business.UserService.AddUserAsync*
  commentId: Overload:NationalMicrochipRegistry.Business.UserService.AddUserAsync
  name: AddUserAsync
  nameWithType: UserService.AddUserAsync
  fullName: NationalMicrochipRegistry.Business.UserService.AddUserAsync
- uid: NationalMicrochipRegistry.Business.IUserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
  commentId: M:NationalMicrochipRegistry.Business.IUserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
  parent: NationalMicrochipRegistry.Business.IUserService
  name: AddUserAsync(User)
  nameWithType: IUserService.AddUserAsync(User)
  fullName: NationalMicrochipRegistry.Business.IUserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
  spec.csharp:
  - uid: NationalMicrochipRegistry.Business.IUserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
    name: AddUserAsync
    nameWithType: IUserService.AddUserAsync
    fullName: NationalMicrochipRegistry.Business.IUserService.AddUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: NationalMicrochipRegistry.Models.User
    name: User
    nameWithType: User
    fullName: NationalMicrochipRegistry.Models.User
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NationalMicrochipRegistry.Business.IUserService.AddUserAsync(NationalMicrochipRegistry.Models.User)
    name: AddUserAsync
    nameWithType: IUserService.AddUserAsync
    fullName: NationalMicrochipRegistry.Business.IUserService.AddUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: NationalMicrochipRegistry.Models.User
    name: User
    nameWithType: User
    fullName: NationalMicrochipRegistry.Models.User
  - name: )
    nameWithType: )
    fullName: )
- uid: NationalMicrochipRegistry.Models.User
  commentId: T:NationalMicrochipRegistry.Models.User
  parent: NationalMicrochipRegistry.Models
  name: User
  nameWithType: User
  fullName: NationalMicrochipRegistry.Models.User
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: NationalMicrochipRegistry.Models
  commentId: N:NationalMicrochipRegistry.Models
  name: NationalMicrochipRegistry.Models
  nameWithType: NationalMicrochipRegistry.Models
  fullName: NationalMicrochipRegistry.Models
- uid: NationalMicrochipRegistry.Business.UserService.RemoveUserAsync*
  commentId: Overload:NationalMicrochipRegistry.Business.UserService.RemoveUserAsync
  name: RemoveUserAsync
  nameWithType: UserService.RemoveUserAsync
  fullName: NationalMicrochipRegistry.Business.UserService.RemoveUserAsync
- uid: NationalMicrochipRegistry.Business.IUserService.RemoveUserAsync(System.Int32)
  commentId: M:NationalMicrochipRegistry.Business.IUserService.RemoveUserAsync(System.Int32)
  parent: NationalMicrochipRegistry.Business.IUserService
  isExternal: true
  name: RemoveUserAsync(Int32)
  nameWithType: IUserService.RemoveUserAsync(Int32)
  fullName: NationalMicrochipRegistry.Business.IUserService.RemoveUserAsync(System.Int32)
  spec.csharp:
  - uid: NationalMicrochipRegistry.Business.IUserService.RemoveUserAsync(System.Int32)
    name: RemoveUserAsync
    nameWithType: IUserService.RemoveUserAsync
    fullName: NationalMicrochipRegistry.Business.IUserService.RemoveUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NationalMicrochipRegistry.Business.IUserService.RemoveUserAsync(System.Int32)
    name: RemoveUserAsync
    nameWithType: IUserService.RemoveUserAsync
    fullName: NationalMicrochipRegistry.Business.IUserService.RemoveUserAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NationalMicrochipRegistry.Business.UserService.GetAllUsersAsync*
  commentId: Overload:NationalMicrochipRegistry.Business.UserService.GetAllUsersAsync
  name: GetAllUsersAsync
  nameWithType: UserService.GetAllUsersAsync
  fullName: NationalMicrochipRegistry.Business.UserService.GetAllUsersAsync
- uid: NationalMicrochipRegistry.Business.IUserService.GetAllUsersAsync
  commentId: M:NationalMicrochipRegistry.Business.IUserService.GetAllUsersAsync
  parent: NationalMicrochipRegistry.Business.IUserService
  name: GetAllUsersAsync()
  nameWithType: IUserService.GetAllUsersAsync()
  fullName: NationalMicrochipRegistry.Business.IUserService.GetAllUsersAsync()
  spec.csharp:
  - uid: NationalMicrochipRegistry.Business.IUserService.GetAllUsersAsync
    name: GetAllUsersAsync
    nameWithType: IUserService.GetAllUsersAsync
    fullName: NationalMicrochipRegistry.Business.IUserService.GetAllUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NationalMicrochipRegistry.Business.IUserService.GetAllUsersAsync
    name: GetAllUsersAsync
    nameWithType: IUserService.GetAllUsersAsync
    fullName: NationalMicrochipRegistry.Business.IUserService.GetAllUsersAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{NationalMicrochipRegistry.Models.User}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{NationalMicrochipRegistry.Models.User}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<User>>
  nameWithType: Task<IEnumerable<User>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<NationalMicrochipRegistry.Models.User>>
  nameWithType.vb: Task(Of IEnumerable(Of User))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of NationalMicrochipRegistry.Models.User))
  name.vb: Task(Of IEnumerable(Of User))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NationalMicrochipRegistry.Models.User
    name: User
    nameWithType: User
    fullName: NationalMicrochipRegistry.Models.User
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NationalMicrochipRegistry.Models.User
    name: User
    nameWithType: User
    fullName: NationalMicrochipRegistry.Models.User
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
