### YamlMime:ManagedReference
items:
- uid: NationalMicrochipRegistry.Data.IRepository`1
  commentId: T:NationalMicrochipRegistry.Data.IRepository`1
  id: IRepository`1
  parent: NationalMicrochipRegistry.Data
  children:
  - NationalMicrochipRegistry.Data.IRepository`1.AddAsync(`0)
  - NationalMicrochipRegistry.Data.IRepository`1.DeleteAsync(System.Int32)
  - NationalMicrochipRegistry.Data.IRepository`1.GetAllAsync
  - NationalMicrochipRegistry.Data.IRepository`1.GetByIdAsync(System.Int32)
  - NationalMicrochipRegistry.Data.IRepository`1.UpdateAsync(`0)
  langs:
  - csharp
  - vb
  name: IRepository<T>
  nameWithType: IRepository<T>
  fullName: NationalMicrochipRegistry.Data.IRepository<T>
  type: Interface
  source:
    remote:
      path: Data/IRepository.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: IRepository
    path: Data/IRepository.cs
    startLine: 10
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Data
  summary: "\nGeneric interface for basic CRUD operations on a repository.\n"
  example: []
  syntax:
    content: public interface IRepository<T>
    typeParameters:
    - id: T
      description: The type of entity managed by the repository.
    content.vb: Public Interface IRepository(Of T)
  nameWithType.vb: IRepository(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T)
  name.vb: IRepository(Of T)
- uid: NationalMicrochipRegistry.Data.IRepository`1.GetAllAsync
  commentId: M:NationalMicrochipRegistry.Data.IRepository`1.GetAllAsync
  id: GetAllAsync
  parent: NationalMicrochipRegistry.Data.IRepository`1
  langs:
  - csharp
  - vb
  name: GetAllAsync()
  nameWithType: IRepository<T>.GetAllAsync()
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.GetAllAsync()
  type: Method
  source:
    remote:
      path: Data/IRepository.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: GetAllAsync
    path: Data/IRepository.cs
    startLine: 16
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Data
  summary: "\nRetrieves all entities from the repository.\n"
  example: []
  syntax:
    content: Task<IEnumerable<T>> GetAllAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
      description: A collection of all entities.
    content.vb: Function GetAllAsync As Task(Of IEnumerable(Of T))
  overload: NationalMicrochipRegistry.Data.IRepository`1.GetAllAsync*
  nameWithType.vb: IRepository(Of T).GetAllAsync()
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).GetAllAsync()
- uid: NationalMicrochipRegistry.Data.IRepository`1.GetByIdAsync(System.Int32)
  commentId: M:NationalMicrochipRegistry.Data.IRepository`1.GetByIdAsync(System.Int32)
  id: GetByIdAsync(System.Int32)
  parent: NationalMicrochipRegistry.Data.IRepository`1
  langs:
  - csharp
  - vb
  name: GetByIdAsync(Int32)
  nameWithType: IRepository<T>.GetByIdAsync(Int32)
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.GetByIdAsync(System.Int32)
  type: Method
  source:
    remote:
      path: Data/IRepository.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: GetByIdAsync
    path: Data/IRepository.cs
    startLine: 23
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Data
  summary: "\nRetrieves an entity by its unique identifier.\n"
  example: []
  syntax:
    content: Task<T> GetByIdAsync(int id)
    parameters:
    - id: id
      type: System.Int32
      description: The unique identifier of the entity.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The entity, or <code>null</code> if not found.
    content.vb: Function GetByIdAsync(id As Integer) As Task(Of T)
  overload: NationalMicrochipRegistry.Data.IRepository`1.GetByIdAsync*
  nameWithType.vb: IRepository(Of T).GetByIdAsync(Int32)
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).GetByIdAsync(System.Int32)
- uid: NationalMicrochipRegistry.Data.IRepository`1.AddAsync(`0)
  commentId: M:NationalMicrochipRegistry.Data.IRepository`1.AddAsync(`0)
  id: AddAsync(`0)
  parent: NationalMicrochipRegistry.Data.IRepository`1
  langs:
  - csharp
  - vb
  name: AddAsync(T)
  nameWithType: IRepository<T>.AddAsync(T)
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.AddAsync(T)
  type: Method
  source:
    remote:
      path: Data/IRepository.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: AddAsync
    path: Data/IRepository.cs
    startLine: 29
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Data
  summary: "\nAdds a new entity to the repository.\n"
  example: []
  syntax:
    content: Task AddAsync(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to add.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AddAsync(entity As T) As Task
  overload: NationalMicrochipRegistry.Data.IRepository`1.AddAsync*
  nameWithType.vb: IRepository(Of T).AddAsync(T)
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).AddAsync(T)
- uid: NationalMicrochipRegistry.Data.IRepository`1.UpdateAsync(`0)
  commentId: M:NationalMicrochipRegistry.Data.IRepository`1.UpdateAsync(`0)
  id: UpdateAsync(`0)
  parent: NationalMicrochipRegistry.Data.IRepository`1
  langs:
  - csharp
  - vb
  name: UpdateAsync(T)
  nameWithType: IRepository<T>.UpdateAsync(T)
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.UpdateAsync(T)
  type: Method
  source:
    remote:
      path: Data/IRepository.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: UpdateAsync
    path: Data/IRepository.cs
    startLine: 35
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Data
  summary: "\nUpdates an existing entity in the repository.\n"
  example: []
  syntax:
    content: Task UpdateAsync(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity with updated values.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function UpdateAsync(entity As T) As Task
  overload: NationalMicrochipRegistry.Data.IRepository`1.UpdateAsync*
  nameWithType.vb: IRepository(Of T).UpdateAsync(T)
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).UpdateAsync(T)
- uid: NationalMicrochipRegistry.Data.IRepository`1.DeleteAsync(System.Int32)
  commentId: M:NationalMicrochipRegistry.Data.IRepository`1.DeleteAsync(System.Int32)
  id: DeleteAsync(System.Int32)
  parent: NationalMicrochipRegistry.Data.IRepository`1
  langs:
  - csharp
  - vb
  name: DeleteAsync(Int32)
  nameWithType: IRepository<T>.DeleteAsync(Int32)
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.DeleteAsync(System.Int32)
  type: Method
  source:
    remote:
      path: Data/IRepository.cs
      branch: master
      repo: https://github.com/Ethan-Hodgson/BIT706_AS3
    id: DeleteAsync
    path: Data/IRepository.cs
    startLine: 41
  assemblies:
  - NationalMicrochipRegistry
  namespace: NationalMicrochipRegistry.Data
  summary: "\nDeletes an entity by its unique identifier.\n"
  example: []
  syntax:
    content: Task DeleteAsync(int id)
    parameters:
    - id: id
      type: System.Int32
      description: The unique identifier of the entity to delete.
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function DeleteAsync(id As Integer) As Task
  overload: NationalMicrochipRegistry.Data.IRepository`1.DeleteAsync*
  nameWithType.vb: IRepository(Of T).DeleteAsync(Int32)
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).DeleteAsync(System.Int32)
references:
- uid: NationalMicrochipRegistry.Data
  commentId: N:NationalMicrochipRegistry.Data
  name: NationalMicrochipRegistry.Data
  nameWithType: NationalMicrochipRegistry.Data
  fullName: NationalMicrochipRegistry.Data
- uid: NationalMicrochipRegistry.Data.IRepository`1.GetAllAsync*
  commentId: Overload:NationalMicrochipRegistry.Data.IRepository`1.GetAllAsync
  name: GetAllAsync
  nameWithType: IRepository<T>.GetAllAsync
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.GetAllAsync
  nameWithType.vb: IRepository(Of T).GetAllAsync
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).GetAllAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<T>>
  nameWithType: Task<IEnumerable<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>
  nameWithType.vb: Task(Of IEnumerable(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of T))
  name.vb: Task(Of IEnumerable(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: NationalMicrochipRegistry.Data.IRepository`1.GetByIdAsync*
  commentId: Overload:NationalMicrochipRegistry.Data.IRepository`1.GetByIdAsync
  name: GetByIdAsync
  nameWithType: IRepository<T>.GetByIdAsync
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.GetByIdAsync
  nameWithType.vb: IRepository(Of T).GetByIdAsync
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).GetByIdAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NationalMicrochipRegistry.Data.IRepository`1.AddAsync*
  commentId: Overload:NationalMicrochipRegistry.Data.IRepository`1.AddAsync
  name: AddAsync
  nameWithType: IRepository<T>.AddAsync
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.AddAsync
  nameWithType.vb: IRepository(Of T).AddAsync
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).AddAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NationalMicrochipRegistry.Data.IRepository`1.UpdateAsync*
  commentId: Overload:NationalMicrochipRegistry.Data.IRepository`1.UpdateAsync
  name: UpdateAsync
  nameWithType: IRepository<T>.UpdateAsync
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.UpdateAsync
  nameWithType.vb: IRepository(Of T).UpdateAsync
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).UpdateAsync
- uid: NationalMicrochipRegistry.Data.IRepository`1.DeleteAsync*
  commentId: Overload:NationalMicrochipRegistry.Data.IRepository`1.DeleteAsync
  name: DeleteAsync
  nameWithType: IRepository<T>.DeleteAsync
  fullName: NationalMicrochipRegistry.Data.IRepository<T>.DeleteAsync
  nameWithType.vb: IRepository(Of T).DeleteAsync
  fullName.vb: NationalMicrochipRegistry.Data.IRepository(Of T).DeleteAsync
